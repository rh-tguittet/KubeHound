// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	collector "github.com/DataDog/KubeHound/pkg/collector"

	mock "github.com/stretchr/testify/mock"
)

// OpenShiftCollectorClient is an autogenerated mock type for the OpenShiftCollectorClient type
type OpenShiftCollectorClient struct {
	mock.Mock
}

type OpenShiftCollectorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenShiftCollectorClient) EXPECT() *OpenShiftCollectorClient_Expecter {
	return &OpenShiftCollectorClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *OpenShiftCollectorClient) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type OpenShiftCollectorClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenShiftCollectorClient_Expecter) Close(ctx interface{}) *OpenShiftCollectorClient_Close_Call {
	return &OpenShiftCollectorClient_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *OpenShiftCollectorClient_Close_Call) Run(run func(ctx context.Context)) *OpenShiftCollectorClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_Close_Call) Return(_a0 error) *OpenShiftCollectorClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_Close_Call) RunAndReturn(run func(context.Context) error) *OpenShiftCollectorClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterInfo provides a mock function with given fields: ctx
func (_m *OpenShiftCollectorClient) ClusterInfo(ctx context.Context) (*collector.ClusterInfo, error) {
	ret := _m.Called(ctx)

	var r0 *collector.ClusterInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*collector.ClusterInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *collector.ClusterInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collector.ClusterInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenShiftCollectorClient_ClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterInfo'
type OpenShiftCollectorClient_ClusterInfo_Call struct {
	*mock.Call
}

// ClusterInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenShiftCollectorClient_Expecter) ClusterInfo(ctx interface{}) *OpenShiftCollectorClient_ClusterInfo_Call {
	return &OpenShiftCollectorClient_ClusterInfo_Call{Call: _e.mock.On("ClusterInfo", ctx)}
}

func (_c *OpenShiftCollectorClient_ClusterInfo_Call) Run(run func(ctx context.Context)) *OpenShiftCollectorClient_ClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_ClusterInfo_Call) Return(_a0 *collector.ClusterInfo, _a1 error) *OpenShiftCollectorClient_ClusterInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenShiftCollectorClient_ClusterInfo_Call) RunAndReturn(run func(context.Context) (*collector.ClusterInfo, error)) *OpenShiftCollectorClient_ClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *OpenShiftCollectorClient) HealthCheck(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenShiftCollectorClient_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type OpenShiftCollectorClient_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OpenShiftCollectorClient_Expecter) HealthCheck(ctx interface{}) *OpenShiftCollectorClient_HealthCheck_Call {
	return &OpenShiftCollectorClient_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *OpenShiftCollectorClient_HealthCheck_Call) Run(run func(ctx context.Context)) *OpenShiftCollectorClient_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_HealthCheck_Call) Return(_a0 bool, _a1 error) *OpenShiftCollectorClient_HealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenShiftCollectorClient_HealthCheck_Call) RunAndReturn(run func(context.Context) (bool, error)) *OpenShiftCollectorClient_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *OpenShiftCollectorClient) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OpenShiftCollectorClient_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type OpenShiftCollectorClient_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *OpenShiftCollectorClient_Expecter) Name() *OpenShiftCollectorClient_Name_Call {
	return &OpenShiftCollectorClient_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *OpenShiftCollectorClient_Name_Call) Run(run func()) *OpenShiftCollectorClient_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OpenShiftCollectorClient_Name_Call) Return(_a0 string) *OpenShiftCollectorClient_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_Name_Call) RunAndReturn(run func() string) *OpenShiftCollectorClient_Name_Call {
	_c.Call.Return(run)
	return _c
}

// StreamClusterRoleBindings provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamClusterRoleBindings(ctx context.Context, ingestor collector.ClusterRoleBindingIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.ClusterRoleBindingIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamClusterRoleBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamClusterRoleBindings'
type OpenShiftCollectorClient_StreamClusterRoleBindings_Call struct {
	*mock.Call
}

// StreamClusterRoleBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.ClusterRoleBindingIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamClusterRoleBindings(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamClusterRoleBindings_Call {
	return &OpenShiftCollectorClient_StreamClusterRoleBindings_Call{Call: _e.mock.On("StreamClusterRoleBindings", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamClusterRoleBindings_Call) Run(run func(ctx context.Context, ingestor collector.ClusterRoleBindingIngestor)) *OpenShiftCollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.ClusterRoleBindingIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamClusterRoleBindings_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamClusterRoleBindings_Call) RunAndReturn(run func(context.Context, collector.ClusterRoleBindingIngestor) error) *OpenShiftCollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Return(run)
	return _c
}

// StreamClusterRoles provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamClusterRoles(ctx context.Context, ingestor collector.ClusterRoleIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.ClusterRoleIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamClusterRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamClusterRoles'
type OpenShiftCollectorClient_StreamClusterRoles_Call struct {
	*mock.Call
}

// StreamClusterRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.ClusterRoleIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamClusterRoles(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamClusterRoles_Call {
	return &OpenShiftCollectorClient_StreamClusterRoles_Call{Call: _e.mock.On("StreamClusterRoles", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamClusterRoles_Call) Run(run func(ctx context.Context, ingestor collector.ClusterRoleIngestor)) *OpenShiftCollectorClient_StreamClusterRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.ClusterRoleIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamClusterRoles_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamClusterRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamClusterRoles_Call) RunAndReturn(run func(context.Context, collector.ClusterRoleIngestor) error) *OpenShiftCollectorClient_StreamClusterRoles_Call {
	_c.Call.Return(run)
	return _c
}

// StreamEndpoints provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamEndpoints(ctx context.Context, ingestor collector.EndpointIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.EndpointIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamEndpoints'
type OpenShiftCollectorClient_StreamEndpoints_Call struct {
	*mock.Call
}

// StreamEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.EndpointIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamEndpoints(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamEndpoints_Call {
	return &OpenShiftCollectorClient_StreamEndpoints_Call{Call: _e.mock.On("StreamEndpoints", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamEndpoints_Call) Run(run func(ctx context.Context, ingestor collector.EndpointIngestor)) *OpenShiftCollectorClient_StreamEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.EndpointIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamEndpoints_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamEndpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamEndpoints_Call) RunAndReturn(run func(context.Context, collector.EndpointIngestor) error) *OpenShiftCollectorClient_StreamEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// StreamNodes provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamNodes(ctx context.Context, ingestor collector.NodeIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.NodeIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamNodes'
type OpenShiftCollectorClient_StreamNodes_Call struct {
	*mock.Call
}

// StreamNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.NodeIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamNodes(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamNodes_Call {
	return &OpenShiftCollectorClient_StreamNodes_Call{Call: _e.mock.On("StreamNodes", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamNodes_Call) Run(run func(ctx context.Context, ingestor collector.NodeIngestor)) *OpenShiftCollectorClient_StreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.NodeIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamNodes_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamNodes_Call) RunAndReturn(run func(context.Context, collector.NodeIngestor) error) *OpenShiftCollectorClient_StreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// StreamPods provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamPods(ctx context.Context, ingestor collector.PodIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.PodIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamPods'
type OpenShiftCollectorClient_StreamPods_Call struct {
	*mock.Call
}

// StreamPods is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.PodIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamPods(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamPods_Call {
	return &OpenShiftCollectorClient_StreamPods_Call{Call: _e.mock.On("StreamPods", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamPods_Call) Run(run func(ctx context.Context, ingestor collector.PodIngestor)) *OpenShiftCollectorClient_StreamPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.PodIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamPods_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamPods_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamPods_Call) RunAndReturn(run func(context.Context, collector.PodIngestor) error) *OpenShiftCollectorClient_StreamPods_Call {
	_c.Call.Return(run)
	return _c
}

// StreamRoleBindings provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamRoleBindings(ctx context.Context, ingestor collector.RoleBindingIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.RoleBindingIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamRoleBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamRoleBindings'
type OpenShiftCollectorClient_StreamRoleBindings_Call struct {
	*mock.Call
}

// StreamRoleBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.RoleBindingIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamRoleBindings(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamRoleBindings_Call {
	return &OpenShiftCollectorClient_StreamRoleBindings_Call{Call: _e.mock.On("StreamRoleBindings", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamRoleBindings_Call) Run(run func(ctx context.Context, ingestor collector.RoleBindingIngestor)) *OpenShiftCollectorClient_StreamRoleBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.RoleBindingIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoleBindings_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamRoleBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoleBindings_Call) RunAndReturn(run func(context.Context, collector.RoleBindingIngestor) error) *OpenShiftCollectorClient_StreamRoleBindings_Call {
	_c.Call.Return(run)
	return _c
}

// StreamRoles provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamRoles(ctx context.Context, ingestor collector.RoleIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.RoleIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamRoles'
type OpenShiftCollectorClient_StreamRoles_Call struct {
	*mock.Call
}

// StreamRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.RoleIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamRoles(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamRoles_Call {
	return &OpenShiftCollectorClient_StreamRoles_Call{Call: _e.mock.On("StreamRoles", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamRoles_Call) Run(run func(ctx context.Context, ingestor collector.RoleIngestor)) *OpenShiftCollectorClient_StreamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.RoleIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoles_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoles_Call) RunAndReturn(run func(context.Context, collector.RoleIngestor) error) *OpenShiftCollectorClient_StreamRoles_Call {
	_c.Call.Return(run)
	return _c
}

// StreamRoutes provides a mock function with given fields: ctx, ingestor
func (_m *OpenShiftCollectorClient) StreamRoutes(ctx context.Context, ingestor collector.RouteIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.RouteIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenShiftCollectorClient_StreamRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamRoutes'
type OpenShiftCollectorClient_StreamRoutes_Call struct {
	*mock.Call
}

// StreamRoutes is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.RouteIngestor
func (_e *OpenShiftCollectorClient_Expecter) StreamRoutes(ctx interface{}, ingestor interface{}) *OpenShiftCollectorClient_StreamRoutes_Call {
	return &OpenShiftCollectorClient_StreamRoutes_Call{Call: _e.mock.On("StreamRoutes", ctx, ingestor)}
}

func (_c *OpenShiftCollectorClient_StreamRoutes_Call) Run(run func(ctx context.Context, ingestor collector.RouteIngestor)) *OpenShiftCollectorClient_StreamRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.RouteIngestor))
	})
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoutes_Call) Return(_a0 error) *OpenShiftCollectorClient_StreamRoutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenShiftCollectorClient_StreamRoutes_Call) RunAndReturn(run func(context.Context, collector.RouteIngestor) error) *OpenShiftCollectorClient_StreamRoutes_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewOpenShiftCollectorClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenShiftCollectorClient creates a new instance of OpenShiftCollectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenShiftCollectorClient(t mockConstructorTestingTNewOpenShiftCollectorClient) *OpenShiftCollectorClient {
	mock := &OpenShiftCollectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
